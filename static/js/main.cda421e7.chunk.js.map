{"version":3,"sources":["store/actions.js","store/sagas/ApiErrors.js","store/sagas/index.js","store/reducers/metric.js","components/Header.js","components/Wrapper.js","components/Dashboard/Subscriber.js","components/Dashboard/SelectMetric.js","components/Dashboard/MetricCard.js","components/Dashboard/MetricCardContainer.js","components/Dashboard/LineChart.js","components/Dashboard/index.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","call","toast","error","takeEvery","actions","ApiErrors","initialState","handlers","state","payload","metric","nextState","handler","type","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","color","className","theme","wrapper","background","palette","main","height","children","NewMessageSubQuery","gql","subscriptionClient","SubscriptionClient","client","createClient","url","exchanges","cacheExchange","fetchExchange","subscriptionExchange","forwardSubscription","operation","request","Subscriber","dispatch","useDispatch","useSubscription","query","response","newMeasurement","res","undefined","message","data","value","SelectMetric","props","_options","options","onSelectedMetricsChange","map","option","label","isMulti","onChange","MetricCard","whichMetric","cardMetric","metricName","Card","style","boxShadow","minWidth","minHeight","zIndex","margin","display","width","justifyContent","alignItems","textAlign","flexDirection","MetricCardContainer","_selectedMetrics","selectedMetrics","flexWrap","flexBasis","flexShrink","index","key","LineChart","getGraphMetrics","length","metricData","_metric","measurements","push","at","shift","forEach","dayjs","format","name","transformChartData","connect","weather","useState","getMetrics","onGetMetrics","onGetGraphMetrics","useEffect","multipleMeasurements","reduce","currStr","subtract","toDate","getTime","input","fetch","method","headers","body","JSON","stringify","then","json","getMultipleMeasurements","padding","maxWidth","store","rootReducer","combineReducers","metricReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","sagas","run","createMuiTheme","typography","useNextVariants","primary","secondary","App","CssBaseline","Wrapper","Header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cda421e7.chunk.js","sourcesContent":["export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\nexport const METRIC_DATA_RECEIVED = \"EVENT/METRIC_DATA_RECEIVED\";","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n  yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];\n","import ApiErrors from \"./ApiErrors\";\n\nexport default [...ApiErrors];\n","import * as actions from \"../actions\";\n\nconst initialState = {\n};\n\n\nconst metricDataReceived = (state, action) => {\n  const { payload } = action\n  // from payload, if latest is in state, then replace, else push\n  if (state.metric) {\n    return {\n      [state.metric]: {\n        ...state,\n      },\n      [payload.metric]: {\n        ...payload\n      }\n    }\n  }\n\n  const nextState = {\n    ...state,\n    [payload.metric]: {\n      ...payload\n    }\n  }\n  return { ...nextState }\n};\n\nconst handlers = {\n  [actions.METRIC_DATA_RECEIVED]: metricDataReceived\n};\n\nexport default (state = initialState, action) => {\n  const handler = handlers[action.type];\n  if (typeof handler === \"undefined\") return state;\n  return handler(state, action);\n};\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1\n  }\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"stephen's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    background: theme.palette.background.main,\n    height: \"100vh\"\n  }\n}));\n\nexport default ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n","import React from 'react';\nimport { useDispatch } from \"react-redux\";\nimport gql from 'graphql-tag';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { useSubscription } from 'urql';\nimport { METRIC_DATA_RECEIVED } from '../../store/actions'\nimport {\n  cacheExchange,\n  createClient,\n  fetchExchange,\n  Provider,\n  subscriptionExchange,\n} from 'urql';\n\nconst NewMessageSubQuery = gql`\n\tsubscription newMeasurement {\n\t\tnewMeasurement{\n\t\t\tmetric\n\t\t\tat\n\t\t\tvalue\n\t\t\tunit\n\t\t}\n\t}\n`;\nconst subscriptionClient = new SubscriptionClient(\n  'ws://react.eogresources.com/graphql',\n  {}\n);\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n  exchanges: [\n    cacheExchange,\n    fetchExchange,\n    subscriptionExchange({\n      forwardSubscription: operation => subscriptionClient.request(operation),\n    }),\n  ],\n});\n\nconst Subscriber = () => {\n  const dispatch = useDispatch()\n  const handleSubscription = (\n    messages = [],\n    response\n  ) => {\n    dispatch({ type: METRIC_DATA_RECEIVED, payload: response.newMeasurement })\n    return []\n  };\n\n  const [res] = useSubscription(\n    { query: NewMessageSubQuery },\n    handleSubscription\n  );\n\n  if (res.error !== undefined) {\n    return <div>{res.error.message}</div>;\n  }\n\n  if (res.data === undefined) {\n    return null;\n  }\n  return (\n    <>\n    </>\n  )\n};\n\nexport default () =>\n  <Provider value={client}>\n    <Subscriber />\n  </Provider>","import React from 'react'\nimport Select from 'react-select'\n\nconst SelectMetric = (props) => {\n  const { options: _options, onSelectedMetricsChange } = props\n  const options = _options.map(option => ({ value: option, label: option }))\n  return (\n    <Select isMulti onChange={onSelectedMetricsChange} options={options} />\n  )\n}\n\nexport default SelectMetric\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst MetricCard = (props) => {\n  const { whichMetric, metric } = props\n  const cardMetric = metric[whichMetric] || {}\n  const { metric: metricName, value } = cardMetric\n  return (\n    <Card style={{ boxShadow: '1px 1px 1px 1px', minWidth: '15em', minHeight: '15em', zIndex: 2, margin: '1em' }}>\n      <div\n        style={{\n          display: 'flex',\n          flexGrow: 1,\n          height: '100%',\n          width: '100%',\n          justifyContent: 'center',\n          alignItems: 'center',\n          textAlign: 'center'\n        }}\n      >\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          <Typography variant='h6'>{metricName}</Typography>\n          <Typography variant='h3'>{value}</Typography>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport default MetricCard\n","import React from 'react'\nimport MetricCard from './MetricCard'\n\nconst MetricCardContainer = (props) => {\n  const { selectedMetrics: _selectedMetrics, metric } = props\n  const selectedMetrics = _selectedMetrics && _selectedMetrics.map(({ value }) => value)\n  return (\n    <div style={{ zIndex: 2, position: 'absolute', width: '60%' }}>\n      <div style={{ display: 'flex', flexWrap: 'wrap', flexBasis: 1, flexShrink: 1 }}>\n        {\n          (selectedMetrics || []).map((whichMetric, index) => {\n            return <MetricCard key={`mc_${index}`} whichMetric={whichMetric} metric={metric} />\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default MetricCardContainer\n","import React from 'react'\nimport 'chart.js'\nimport { LineChart as RLineChart } from 'react-chartkick'\nimport dayjs from 'dayjs'\n\n// TODO: assumes \"metric will be added on end of getGraphMetrics\"\nconst transformChartData = ({ metric, getGraphMetrics }) => {\n  if (!getGraphMetrics.length) {\n    return []\n  }\n\n  const nextChartData = getGraphMetrics.map(({ metric: _metric, measurements }) => {\n    if (metric[_metric] && metric[_metric].value !== measurements[measurements.length - 1].value) {\n      measurements.push({ at: metric[_metric].at, value: metric[_metric].value })\n      measurements.shift()\n    }\n    const data = {}\n    measurements.forEach(({ at, value }) => {\n      data[dayjs(at).format('hh:mm:ss A')] = value\n    })\n    return ({ name: _metric, data })\n  })\n\n  return nextChartData\n}\n\n// TODO: on mount then update --> fetch the latest measurements. Then, add the subscription received data to the \n// graph data model\nconst LineChart = ({ metric, getGraphMetrics = [] }) => {\n  if (!getGraphMetrics || !getGraphMetrics.length) {\n    return null\n  }\n  const metricData = transformChartData({ metric, getGraphMetrics })\n  return (\n    <div>\n      <RLineChart data={metricData} />\n    </div>\n  )\n}\n\nexport default LineChart\n","import React, { useState, useEffect } from 'react'\nimport Subscriber from './Subscriber'\nimport SelectMetric from './SelectMetric'\nimport { connect } from 'react-redux'\nimport MetricCardContainer from './MetricCardContainer'\nimport LineChart from './LineChart'\nimport dayjs from 'dayjs'\n\nconst Dashboard = (props) => {\n  const [selectedMetrics, onSelectedMetricsChange] = useState([])\n  const [getMetrics, onGetMetrics] = useState([])\n  const [getGraphMetrics, onGetGraphMetrics] = useState([])\n\n  useEffect(() => {\n    const multipleMeasurements = selectedMetrics && selectedMetrics.reduce((currStr, metric) => {\n      return currStr += `{ metricName: \"${metric.value}\", after: ${dayjs().subtract(1, 'minute').toDate().getTime()} },`\n    }, '')\n    const input = `[${multipleMeasurements || ''}]`\n    fetch('https://react.eogresources.com/graphql', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        query: `\n        { getMultipleMeasurements(input: ${input} ) {\n            metric\n            measurements {\n              unit\n              metric\n              at\n              value\n            }\n          }\n        }\n      ` }),\n    })\n      .then(res => res.json())\n      .then(res => {\n        if (res.data && res.data.getMultipleMeasurements && res.data.getMultipleMeasurements.length) {\n          onGetGraphMetrics(res.data.getMultipleMeasurements)\n        }\n      })\n\n    return () => {\n    }\n  }, [selectedMetrics])\n  useEffect(() => {\n    fetch('https://react.eogresources.com/graphql', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query: '{ getMetrics }' }),\n    })\n      .then(res => res.json())\n      .then(res => {\n        onGetMetrics(res.data.getMetrics)\n      })\n\n    return () => {\n    }\n  }, [])\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', flexGrow: 1 }}>\n      <div>\n        <MetricCardContainer selectedMetrics={selectedMetrics}  {...props} />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <div style={{ minWidth: '75%', padding: 1 }} />\n        <div style={{ minWidth: '25%', maxWidth: '25%' }}>\n          <SelectMetric options={getMetrics} selectedMetrics={selectedMetrics} onSelectedMetricsChange={onSelectedMetricsChange} />\n        </div>\n      </div>\n      <div>\n        <LineChart {...props} getGraphMetrics={selectedMetrics && selectedMetrics.length && getGraphMetrics} />\n      </div>\n      <Subscriber />\n    </div >\n  )\n}\nconst mapStateToProps = (state) => {\n  return {\n    metric: state.metric,\n    weather: state.weather\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard)\n","import React from \"react\";\nimport createStore from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport Dashboard from \"./components/Dashboard\";\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: \"rgb(39,49,66)\"\n    },\n    secondary: {\n      main: \"rgb(197,208,222)\"\n    },\n    background: {\n      main: \"rgb(226,231,238)\"\n    }\n  }\n});\n\nconst App = props => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        <Dashboard />\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from \"./sagas\";\nimport metricReducer from \"./reducers/metric\";\n\nexport default () => {\n  const rootReducer = combineReducers({\n    metric: metricReducer\n  });\n\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\n\n  sagas.forEach(sagaMiddleware.run);\n\n  return store;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}